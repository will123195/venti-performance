{"version":3,"sources":["Cell.js","Matrix.js","serviceWorker.js","index.js","App.js"],"names":["Cell","n","color","useVenti","get","style","width","height","textAlign","padding","float","backgroundColor","id","key","Matrix","numElements","state","numColorUpdates","startTime","Date","now","secondsRunning","elements","push","fontWeight","toLocaleString","Math","floor","Boolean","window","location","hostname","match","setColor","set","randomColor","random","toString","setTimeout","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+KAGe,SAASA,EAAT,GAAsB,IAANC,EAAK,EAALA,EAEvBC,EADQC,cACMC,IAAN,iBAAoBH,IAClC,OACE,yBACEI,MAAO,CACLC,MAAO,GACPC,OAAQ,GACRC,UAAW,SACXC,QAAS,GACTC,MAAO,OACPC,gBAAiBT,GAEnBU,GAAE,UAAKX,GACPY,IAAG,UAAKZ,IACRA,GCdS,SAASa,EAAT,GAMb,IAN+C,IAAhBC,EAAe,EAAfA,YACzBC,EAAQb,cACRc,EAAkBD,EAAMZ,IAAI,kBAAmB,GAC/Cc,EAAYF,EAAMZ,IAAI,YAAae,KAAKC,OACxCC,GAAkBF,KAAKC,MAAQF,GAAa,IAC5CI,EAAW,GACRrB,EAAI,EAAGA,GAAKc,EAAad,IAChCqB,EAASC,KAAK,kBAACvB,EAAD,CAAMa,IAAKZ,EAAGA,EAAGA,KAEjC,OACE,6BACE,wBAAII,MAAO,CAAEmB,WAAY,MAAO,8BAAOH,GAAvC,KACA,6BAAMJ,EAAgBQ,iBAAtB,WACA,6BACGC,KAAKC,MAAMV,EAAkBI,GADhC,sBAGA,yBAAKhB,MAAO,CAAEC,MAAO,MAClBgB,ICTWM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IACIf,EAAkB,EAEtB,SAASgB,EAAShC,GACQ,IAApBgB,GACFD,IAAMkB,IAAI,YAAaf,KAAKC,OAE9B,IAAMe,EAAW,WAAOT,KAAKC,MAAoB,SAAdD,KAAKU,UAAmBC,SAAS,KACpErB,IAAMkB,IAAN,iBAAoBjC,GAAKkC,GACzBlB,IACAD,IAAMkB,IAAI,kBAAmBjB,GAC7BqB,YAAW,kBAAML,EAAShC,KAAI,GAGhC,IAAK,IAAIA,EAAI,EAAGA,GAdI,IAccA,IAChCgC,EAAShC,GAGXsC,IAASC,OACP,mBCtBa,YAA+B,IAAhBzB,EAAe,EAAfA,YAC5B,OAAO,oCACL,2CACA,kBAACD,EAAD,CAAQC,YAAaA,ODmBvB,CAAKA,YAnBa,MAoBlB0B,SAASC,eAAe,SDyGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d7769057.chunk.js","sourcesContent":["import React from 'react'\nimport { useVenti } from 'venti'\n\nexport default function Cell({ n }) {\n  const state = useVenti()\n  const color = state.get(`colors.${n}`)\n  return (\n    <div \n      style={{ \n        width: 30,\n        height: 30,\n        textAlign: 'center',\n        padding: 10,\n        float: 'left',\n        backgroundColor: color\n      }} \n      id={`${n}`}\n      key={`${n}`}\n    >{n}</div>\n  )\n}\n","import React from 'react'\nimport Cell from './Cell'\nimport { useVenti } from 'venti'\n\nexport default function Matrix({ numElements }) {\n  const state = useVenti()\n  const numColorUpdates = state.get('numColorUpdates', 0)\n  const startTime = state.get('startTime', Date.now())\n  const secondsRunning = (Date.now() - startTime) / 1000\n  const elements = []\n  for (let n = 1; n <= numElements; n++) {\n    elements.push(<Cell key={n} n={n} />)\n  }\n  return (\n    <div>\n      <h1 style={{ fontWeight: 100 }}><span>{secondsRunning}</span>s</h1>\n      <div>{numColorUpdates.toLocaleString()} colors</div>\n      <div>\n        {Math.floor(numColorUpdates / secondsRunning)} colors per second\n      </div>\n      <div style={{ width: 500 }}>\n        {elements}\n      </div>\n    </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { state } from 'venti'\n\nconst numElements = 100\nlet numColorUpdates = 0\n\nfunction setColor(n) {\n  if (numColorUpdates === 0) {\n    state.set('startTime', Date.now())\n  }\n  const randomColor = `#${Math.floor(Math.random()*16777215).toString(16)}`\n  state.set(`colors.${n}`, randomColor)\n  numColorUpdates++\n  state.set('numColorUpdates', numColorUpdates)\n  setTimeout(() => setColor(n), 0)\n}\n\nfor (let n = 1; n <= numElements; n++) {\n  setColor(n)\n}\n\nReactDOM.render(\n  <App numElements={numElements} />\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react'\nimport Matrix from './Matrix'\n\nexport default function App({ numElements }) {\n  return <>\n    <h1>React Venti</h1>\n    <Matrix numElements={numElements} />\n  </>\n}\n"],"sourceRoot":""}